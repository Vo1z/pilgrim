//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Level/Data/Input/StationaryInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Support
{
    public partial class @StationaryInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @StationaryInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""StationaryInput"",
    ""maps"": [
        {
            ""name"": ""FPS"",
            ""id"": ""ec781481-f084-4aba-880e-9f5745f3d2a9"",
            ""actions"": [
                {
                    ""name"": ""MovementX"",
                    ""type"": ""Value"",
                    ""id"": ""dd849214-1a36-4e18-be67-dd48c524a51c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=1.401298E-45,behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementY"",
                    ""type"": ""Value"",
                    ""id"": ""733819d8-ffdd-4cdd-8987-75496f7841fb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""43cf1caf-3671-4806-88af-795e77aa560f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotationX"",
                    ""type"": ""Value"",
                    ""id"": ""5a3ee4a8-273c-4ec6-9365-bf182e3ab87b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotationY"",
                    ""type"": ""Value"",
                    ""id"": ""2412eaed-3ced-42ee-b47a-6489c7718896"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Utility"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eddeaa98-a199-4516-929b-13d7ed6942d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""bd9b3406-2793-428b-b050-29c60df61eb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lean"",
                    ""type"": ""Value"",
                    ""id"": ""36b1d91a-ed42-45b9-962d-73f59779f8c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b8e18f94-9a4c-4e4b-b05a-418f7dfb76fc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""46650f52-09c1-44fa-9179-eb6f654f65b2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementX"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""90ce448e-967a-48ff-9f54-5d2aab5da204"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""387d1fa8-f1af-4aea-bf9e-783321fbade7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WS"",
                    ""id"": ""4f7bf01c-1628-4d16-8886-80473a117f7d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementY"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c0cfb2e6-d36e-4470-8a43-214ac4838624"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""59e0f6a7-f4e7-4ba9-96e5-e9c436eac5d9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""af5e9dd8-799f-419c-8720-01f85d5716c2"",
                    ""path"": ""<Mouse>/Delta/X"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85ce53cc-f7a3-4e1a-8947-b3b24e20d811"",
                    ""path"": ""<Mouse>/Delta/Y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71283398-1fc5-439d-b032-4e01e758ef57"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Utility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed7e5b89-517c-4be0-9fd3-6eca66041d3a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""QE"",
                    ""id"": ""634e9c71-e5cf-45e8-998a-ff21fc8112cc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lean"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b9b1e0f7-7194-41c3-8133-8c265268af9f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lean"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""37885d99-4697-47d3-a6d0-ad854c5f58df"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lean"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // FPS
            m_FPS = asset.FindActionMap("FPS", throwIfNotFound: true);
            m_FPS_MovementX = m_FPS.FindAction("MovementX", throwIfNotFound: true);
            m_FPS_MovementY = m_FPS.FindAction("MovementY", throwIfNotFound: true);
            m_FPS_Jump = m_FPS.FindAction("Jump", throwIfNotFound: true);
            m_FPS_RotationX = m_FPS.FindAction("RotationX", throwIfNotFound: true);
            m_FPS_RotationY = m_FPS.FindAction("RotationY", throwIfNotFound: true);
            m_FPS_Utility = m_FPS.FindAction("Utility", throwIfNotFound: true);
            m_FPS_Crouch = m_FPS.FindAction("Crouch", throwIfNotFound: true);
            m_FPS_Lean = m_FPS.FindAction("Lean", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // FPS
        private readonly InputActionMap m_FPS;
        private IFPSActions m_FPSActionsCallbackInterface;
        private readonly InputAction m_FPS_MovementX;
        private readonly InputAction m_FPS_MovementY;
        private readonly InputAction m_FPS_Jump;
        private readonly InputAction m_FPS_RotationX;
        private readonly InputAction m_FPS_RotationY;
        private readonly InputAction m_FPS_Utility;
        private readonly InputAction m_FPS_Crouch;
        private readonly InputAction m_FPS_Lean;
        public struct FPSActions
        {
            private @StationaryInput m_Wrapper;
            public FPSActions(@StationaryInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @MovementX => m_Wrapper.m_FPS_MovementX;
            public InputAction @MovementY => m_Wrapper.m_FPS_MovementY;
            public InputAction @Jump => m_Wrapper.m_FPS_Jump;
            public InputAction @RotationX => m_Wrapper.m_FPS_RotationX;
            public InputAction @RotationY => m_Wrapper.m_FPS_RotationY;
            public InputAction @Utility => m_Wrapper.m_FPS_Utility;
            public InputAction @Crouch => m_Wrapper.m_FPS_Crouch;
            public InputAction @Lean => m_Wrapper.m_FPS_Lean;
            public InputActionMap Get() { return m_Wrapper.m_FPS; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(FPSActions set) { return set.Get(); }
            public void SetCallbacks(IFPSActions instance)
            {
                if (m_Wrapper.m_FPSActionsCallbackInterface != null)
                {
                    @MovementX.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnMovementX;
                    @MovementX.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnMovementX;
                    @MovementX.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnMovementX;
                    @MovementY.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnMovementY;
                    @MovementY.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnMovementY;
                    @MovementY.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnMovementY;
                    @Jump.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnJump;
                    @RotationX.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnRotationX;
                    @RotationX.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnRotationX;
                    @RotationX.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnRotationX;
                    @RotationY.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnRotationY;
                    @RotationY.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnRotationY;
                    @RotationY.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnRotationY;
                    @Utility.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnUtility;
                    @Utility.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnUtility;
                    @Utility.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnUtility;
                    @Crouch.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnCrouch;
                    @Crouch.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnCrouch;
                    @Crouch.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnCrouch;
                    @Lean.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnLean;
                    @Lean.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnLean;
                    @Lean.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnLean;
                }
                m_Wrapper.m_FPSActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MovementX.started += instance.OnMovementX;
                    @MovementX.performed += instance.OnMovementX;
                    @MovementX.canceled += instance.OnMovementX;
                    @MovementY.started += instance.OnMovementY;
                    @MovementY.performed += instance.OnMovementY;
                    @MovementY.canceled += instance.OnMovementY;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @RotationX.started += instance.OnRotationX;
                    @RotationX.performed += instance.OnRotationX;
                    @RotationX.canceled += instance.OnRotationX;
                    @RotationY.started += instance.OnRotationY;
                    @RotationY.performed += instance.OnRotationY;
                    @RotationY.canceled += instance.OnRotationY;
                    @Utility.started += instance.OnUtility;
                    @Utility.performed += instance.OnUtility;
                    @Utility.canceled += instance.OnUtility;
                    @Crouch.started += instance.OnCrouch;
                    @Crouch.performed += instance.OnCrouch;
                    @Crouch.canceled += instance.OnCrouch;
                    @Lean.started += instance.OnLean;
                    @Lean.performed += instance.OnLean;
                    @Lean.canceled += instance.OnLean;
                }
            }
        }
        public FPSActions @FPS => new FPSActions(this);
        public interface IFPSActions
        {
            void OnMovementX(InputAction.CallbackContext context);
            void OnMovementY(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnRotationX(InputAction.CallbackContext context);
            void OnRotationY(InputAction.CallbackContext context);
            void OnUtility(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnLean(InputAction.CallbackContext context);
        }
    }
}
